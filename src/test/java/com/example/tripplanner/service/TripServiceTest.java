package com.example.tripplanner.service;

import com.example.tripplanner.exceptions.ResourceNotFoundException;
import com.example.tripplanner.model.Trip;
import com.example.tripplanner.model.dto.TripRequest;
import com.example.tripplanner.model.dto.TripResponse;
import com.example.tripplanner.model.factory.TripFactory;
import com.example.tripplanner.repository.TripRepository;
import com.example.tripplanner.service.impl.TripServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.any;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@ExtendWith(MockitoExtension.class)
public class TripServiceTest {

    @Mock
    private TripRepository tripRepository;
    private TripFactory tripFactory = new TripFactory();

    private TripServiceImpl tripServiceimpl;

    private TripRequest validTripRequest;
    private Trip savedTrip;
    private TripResponse expectedTripResponse;

    private Trip existingTrip1;
    private TripResponse existingTripResponse1;
    private Trip existingTrip2;
    private TripResponse existingTripResponse2;

    private Trip existingTripToUpdate;
    private TripRequest updateRequest;
    private Trip updatedTripEntity;
    private TripResponse updatedTripResponseExpected;

    private Trip tripToDelete;

    @BeforeEach
    public void setUp() {
        tripServiceimpl = new TripServiceImpl(tripRepository, tripFactory);
        validTripRequest = new TripRequest(
                "Summer Vacation",
                LocalDate.of(2025, 7, 1),
                LocalDate.of(2025, 7, 15),
                "Relaxing beach trip"
        );
        savedTrip = new Trip(
                1L, // Simulate an ID generated by the database
                "Summer Vacation",
                LocalDate.of(2025, 7, 1),
                LocalDate.of(2025, 7, 15),
                "Relaxing beach trip"
        );

        expectedTripResponse = new TripResponse(
                1L,
                "Summer Vacation",
                LocalDate.of(2025, 7, 1),
                LocalDate.of(2025, 7, 15),
                "Relaxing beach trip"
        );
        existingTrip1 = new Trip(
                101L,
                "Europe Tour",
                LocalDate.of(2025, 6, 1),
                LocalDate.of(2025, 6, 20),
                "Exploring European cities",
                Collections.emptyList()
        );
        existingTripResponse1 = new TripResponse(
                101L,
                "Europe Tour",
                LocalDate.of(2025, 6, 1),
                LocalDate.of(2025, 6, 20),
                "Exploring European cities"
        );

        existingTrip2 = new Trip(
                102L,
                "Mountain Hike",
                LocalDate.of(2025, 8, 1),
                LocalDate.of(2025, 8, 5),
                "Challenging mountain trails"
        );
        existingTripResponse2 = new TripResponse(
                102L,
                "Mountain Hike",
                LocalDate.of(2025, 8, 1),
                LocalDate.of(2025, 8, 5),
                "Challenging mountain trails"
        );

        existingTripToUpdate = new Trip(
                200L,
                "Old Trip Name",
                LocalDate.of(2025, 1, 1),
                LocalDate.of(2025, 1, 5),
                "Old description"
        );
        updateRequest = new TripRequest(
                "New Trip Name",
                LocalDate.of(2025, 2, 1),
                LocalDate.of(2025, 2, 10),
                "New description"
        );
        updatedTripEntity = new Trip(
                200L,
                "New Trip Name",
                LocalDate.of(2025, 2, 1),
                LocalDate.of(2025, 2, 10),
                "New description"
        );
        updatedTripResponseExpected = new TripResponse(
                200L,
                "New Trip Name",
                LocalDate.of(2025, 2, 1),
                LocalDate.of(2025, 2, 10),
                "New description"
        );

        // Setup for delete test
        tripToDelete = new Trip(
                300L,
                "Trip to Delete",
                LocalDate.of(2025, 3, 1),
                LocalDate.of(2025, 3, 5),
                "A trip that will be deleted"
        );
    }

    @Test
    @DisplayName("Create Trip successfully")
    public void createTrip() {
        when(tripRepository.save(any(Trip.class))).thenReturn(savedTrip);
        TripResponse actualTripResponse = tripServiceimpl.createTrip(validTripRequest);
        assertThat(actualTripResponse).isNotNull();
        assertThat(actualTripResponse.getId()).isEqualTo(expectedTripResponse.getId());
        assertThat(actualTripResponse.getName()).isEqualTo(expectedTripResponse.getName());
        assertThat(actualTripResponse.getStartDate()).isEqualTo(expectedTripResponse.getStartDate());
        assertThat(actualTripResponse.getEndDate()).isEqualTo(expectedTripResponse.getEndDate());
        assertThat(actualTripResponse.getDescription()).isEqualTo(expectedTripResponse.getDescription());
    }
    @Test
    @DisplayName("Should retrieve a trip by ID when it exists")
    void shouldRetrieveTripByIdWhenExists() {
        when(tripRepository.findById(existingTrip1.getId())).thenReturn(Optional.of(existingTrip1));
        TripResponse foundTrip = tripServiceimpl.getTripById(existingTrip1.getId());
        assertThat(foundTrip).isNotNull();
        assertThat(foundTrip.getId()).isEqualTo(existingTripResponse1.getId());
        assertThat(foundTrip.getName()).isEqualTo(existingTripResponse1.getName());
    }

    @Test
    @DisplayName("Should throw ResourceNotFoundException when trip ID does not exist")
    void shouldThrowNotFoundExceptionWhenTripIdDoesNotExist() {
        Long nonExistentId = 999L;
        when(tripRepository.findById(nonExistentId)).thenReturn(Optional.empty());
        assertThatThrownBy(() -> tripServiceimpl.getTripById(nonExistentId))
                .isInstanceOf(ResourceNotFoundException.class)
                .hasMessageContaining("Trip not found with ID: " + nonExistentId);
    }

    @Test
    @DisplayName("Should retrieve all trips successfully")
    void shouldRetrieveAllTripsSuccessfully() {
        List<Trip> trips = Arrays.asList(existingTrip1, existingTrip2);
        when(tripRepository.findAll()).thenReturn(trips);
        List<TripResponse> foundTrips = tripServiceimpl.getAllTrips();
        assertThat(foundTrips).isNotNull();
        assertThat(foundTrips).hasSize(2);
        assertThat(foundTrips.get(0).getId()).isEqualTo(existingTripResponse1.getId());
        assertThat(foundTrips.get(1).getId()).isEqualTo(existingTripResponse2.getId());
    }

    @Test
    @DisplayName("Should return an empty list when no trips exist")
    void shouldReturnEmptyListWhenNoTripsExist() {
        when(tripRepository.findAll()).thenReturn(Collections.emptyList());
        List<TripResponse> foundTrips = tripServiceimpl.getAllTrips();
        assertThat(foundTrips).isNotNull();
        assertThat(foundTrips).isEmpty();
    }

    @Test
    @DisplayName("Should update an existing trip successfully")
    void shouldUpdateExistingTripSuccessfully() {
        when(tripRepository.findById(existingTripToUpdate.getId())).thenReturn(Optional.of(existingTripToUpdate));
        when(tripRepository.save(any(Trip.class))).thenReturn(updatedTripEntity);
        TripResponse actualUpdatedTrip = tripServiceimpl.updateTrip(existingTripToUpdate.getId(), updateRequest);
        assertThat(actualUpdatedTrip).isNotNull();
        assertThat(actualUpdatedTrip.getId()).isEqualTo(updatedTripResponseExpected.getId());
        assertThat(actualUpdatedTrip.getName()).isEqualTo(updatedTripResponseExpected.getName());
        assertThat(actualUpdatedTrip.getDescription()).isEqualTo(updatedTripResponseExpected.getDescription());
    }

    @Test
    @DisplayName("Should throw ResourceNotFoundException when updating a non-existent trip")
    void shouldThrowNotFoundExceptionWhenUpdatingNonExistentTrip() {
        Long nonExistentId = 999L;
        when(tripRepository.findById(nonExistentId)).thenReturn(Optional.empty());
        assertThatThrownBy(() -> tripServiceimpl.updateTrip(nonExistentId, updateRequest))
                .isInstanceOf(ResourceNotFoundException.class)
                .hasMessageContaining("Trip not found with ID: " + nonExistentId);
    }

    /**
     * Test case for deleting an existing trip.
     * TDD Phase: RED
     * This test will FAIL initially because TripServiceImpl does not yet
     * have the `deleteTrip` method implemented.
     */
    @Test
    @DisplayName("Should delete an existing trip successfully")
    void shouldDeleteExistingTripSuccessfully() {
        // GIVEN: The repository finds the trip to be deleted
        when(tripRepository.existsById(tripToDelete.getId())).thenReturn(true);
        // WHEN: Call the service method to delete the trip
        tripServiceimpl.deleteTrip(tripToDelete.getId());
        // THEN: Verify that deleteById was called exactly once on the repository
        verify(tripRepository, times(1)).deleteById(tripToDelete.getId());
    }

    /**
     * Test case for deleting a non-existent trip.
     * TDD Phase: RED
     * This test will FAIL initially because TripServiceImpl does not yet
     * correctly throw ResourceNotFoundException for non-existent IDs during delete.
     */
    @Test
    @DisplayName("Should throw ResourceNotFoundException when deleting a non-existent trip")
    void shouldThrowNotFoundExceptionWhenDeletingNonExistentTrip() {
        Long nonExistentId = 999L;
        // GIVEN: The repository returns an empty Optional for a non-existent ID
        when(tripRepository.existsById(nonExistentId)).thenReturn(false);

        // WHEN/THEN: Assert that calling the service method throws ResourceNotFoundException
        assertThatThrownBy(() -> tripServiceimpl.deleteTrip(nonExistentId))
                .isInstanceOf(ResourceNotFoundException.class)
                .hasMessageContaining("Trip not found with ID: " + nonExistentId);
        // Also verify that deleteById was NOT called, as the trip didn't exist
        verify(tripRepository, times(0)).deleteById(nonExistentId);
    }

}
